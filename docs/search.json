[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "Grammys_Analytics.html",
    "href": "Grammys_Analytics.html",
    "title": "Grammys Project",
    "section": "",
    "text": "Are you excited to dive into data work for an exciting project at The Recording Academy? You know, the non-profit organization behind the Grammy Awards!\nIn this project, you’ll work on real data from both websites owned by The Recording Academy, the non-profit organization behind the famous Grammy Awards. As you just learned, Ray Starck, the VP of Digital Strategy, decided to split the websites into grammy.com and recordingacademy.com to better serve the Recording Academy’s various audience needs.\nNow, you are tasked with examining the impact of splitting up the two websites, and analyzing the data for a better understanding of trends and audience behavior on both sites.\nAre you ready?!?!\nLet’s do this!"
  },
  {
    "objectID": "Grammys_Analytics.html#data-dictionary",
    "href": "Grammys_Analytics.html#data-dictionary",
    "title": "Grammys Project",
    "section": "Data Dictionary",
    "text": "Data Dictionary\nTo start, you will be working with two files, grammys_live_web_analytics.csv and ra_live_web_analytics.csv.\nThese files will contain the following information:\n\ndate - The date the data was confirmed. It is in yyyy-mm-dd format.\nvisitors - The number of users who went on the website on that day.\npageviews - The number of pages that all users viewed on the website.\nsessions - The total number of sessions on the website. A session is a group of user interactions with your website that take place within a given time frame. For example a single session can contain multiple page views, events, social interactions.\nbounced_sessions - The total number of bounced sessions on the website. A bounced session is when a visitor comes to the website and does not interact with any pages / links and leaves.\navg_session_duration_secs - The average length for all session durations for all users that came to the website that day.\nawards_week - A binary flag if the dates align with marketing campaigns before and after the Grammys award ceremony was held. This is the big marketing push to get as many eyeballs watching the event.\nawards_night - The actual night that Grammy Awards event was held."
  },
  {
    "objectID": "Grammys_Analytics.html#task-1",
    "href": "Grammys_Analytics.html#task-1",
    "title": "Grammys Project",
    "section": "Task 1",
    "text": "Task 1\nImport the pandas,numpy, and plotly.express libraries.\n\n# Import libraries\nimport pandas as pd\nimport numpy as np\nimport plotly.express as px\n\n\n# RUN THIS CELL - DO NOT MODIFY\n# this formats numbers to two decimal places when shown in pandas\npd.set_option('display.float_format', lambda x: '%.2f' % x)"
  },
  {
    "objectID": "Grammys_Analytics.html#task-2",
    "href": "Grammys_Analytics.html#task-2",
    "title": "Grammys Project",
    "section": "Task 2",
    "text": "Task 2\nLoad in the first two files for your analysis. They are the grammy_live_web_analytics.csv and ra_live_web_analytics.csv.\nA. For the grammy_live_web_analytics.csv file store that into a dataframe called full_df\nB. For the ra_live_web_analytics.csv file store that into a dataframe called rec_academy\nC. Preview the dataframes to familiarize yourself with the data.\nAll files needed can be found in the datasets_grammys folder.\n\n# Read in dataframes\nfull_df = pd.read_csv('datasets_grammys/grammy_live_web_analytics.csv')\nrec_academy = pd.read_csv('datasets_grammys/ra_live_web_analytics.csv')\n\n\n# preview full_df dataframe\nfull_df.sample(5)\n\n\n\n\n\n\n\n\ndate\nvisitors\npageviews\nsessions\nbounced_sessions\navg_session_duration_secs\nawards_week\nawards_night\n\n\n\n\n1131\n2020-02-06\n38833\n55270\n40895\n18882\n93\n0\n0\n\n\n1133\n2020-02-08\n35951\n49920\n38169\n18593\n87\n0\n0\n\n\n1320\n2020-08-13\n18518\n34109\n19966\n8991\n91\n0\n0\n\n\n2248\n2023-02-27\n21367\n41234\n22820\n11280\n77\n0\n0\n\n\n1661\n2021-07-20\n18707\n33719\n20190\n9318\n105\n0\n0\n\n\n\n\n\n\n\n\n# preview rec_academy dataframe\nrec_academy.sample(5)\n\n\n\n\n\n\n\n\ndate\nvisitors\npageviews\nsessions\nbounced_sessions\navg_session_duration_secs\nawards_week\nawards_night\n\n\n\n\n316\n2022-12-14\n3850\n15743\n4722\n848\n144\n0\n0\n\n\n147\n2022-06-28\n1875\n4975\n2302\n1384\n139\n0\n0\n\n\n71\n2022-04-13\n1127\n2813\n1278\n790\n132\n0\n0\n\n\n125\n2022-06-06\n993\n1801\n1086\n784\n63\n0\n0\n\n\n361\n2023-01-28\n1706\n6936\n2080\n310\n132\n0\n0"
  },
  {
    "objectID": "Grammys_Analytics.html#task-3",
    "href": "Grammys_Analytics.html#task-3",
    "title": "Grammys Project",
    "section": "Task 3",
    "text": "Task 3\nWe all know The Grammy Awards is the biggest music event in the music industry, but how many visitors does that bring to the website?\nA. Create a line chart of the number of users on the site for every day in the full_df. See if you can spot the days the Grammys awards are hosted.\n\n# Plot a line chart of the visitors on the site.\npx.line(data_frame=full_df,\n        x='date',\n        y='visitors',\n        title='Number of Visitors to the Grammy\\'s Website Over Time')\n\n                                                \n\n\nRemark: The smaller spikes, typically around November/December of each year, are when the nominees are announced.\nB. What can you say about the visitors to the website by looking at the graph?\n\nThe number of visitors on days that are not directly related to the awards are much lower and were slowly increasing until 2022, where they stay steady.\nThe spike of visitors on the days the nominees are being anounced is usualy less than half of the number of visitors on the awards ceramony.\n2019 and 2021 had the highest number of visitors on their awards days\nThe awards ceramony in 2021 also had the highest number of visitors on the day the nominees were anounced.\nThere is an unexpected spike of visitors on Sep. 2020"
  },
  {
    "objectID": "Grammys_Analytics.html#task-4",
    "href": "Grammys_Analytics.html#task-4",
    "title": "Grammys Project",
    "section": "Task 4",
    "text": "Task 4\nLet’s investigate what an “average” day looks like when the awards show is being hosted versus the other 364 days out of the year.\nA. Use the pandas .groupby() to calculate the number of visitors on the site based on the values in the column awards_night.\n\nfull_df.groupby(by='awards_night').agg({'visitors': 'mean'})\n\n\n\n\n\n\n\n\nvisitors\n\n\nawards_night\n\n\n\n\n\n0\n32388.28\n\n\n1\n1389590.23\n\n\n\n\n\n\n\nB. What can you say about these results? Roughly how many more visitors are on the website for the awards ceremony versus a regular day?\nAn awards night has on average around 1 million more visitors than the average of a regular day (around 43x more traffic on an awards night on average then a regular day on average)\nRemark: This is The Recording Academy’s biggest challenge! How do you transform a business that relies on the success of one event per year into one that continues to bring users back on the site year round?"
  },
  {
    "objectID": "Grammys_Analytics.html#task-5",
    "href": "Grammys_Analytics.html#task-5",
    "title": "Grammys Project",
    "section": "Task 5",
    "text": "Task 5\nWhen The Recording Academy decided to split their website into two domains, grammy.com and recordingacademy.com, the data capture for grammy.com was not affected. So the full_df variable needs to be split separately into two dataframes. The day the domains were switched is on 2022-02-01.\nCreate two new dataframes:\n\ncombined_site for all dates before 2022-02-01\ngrammys for all dates after (and including) 2022-02-01\n\n\n# Split the data to separate the full_df into two new dataframes.\n# One for before the switch of the websites and one for after\ncombined_site = full_df[full_df['date'] &lt; '2022-02-01']\ngrammys = full_df[full_df['date'] &gt;= '2022-02-01']\n\n\n# Run the following cell - DO NOT MODIFY\n# .copy() prevents pandas from printing a scary-looking warning message\ncombined_site = combined_site.copy()\ngrammys = grammys.copy()\n\n\n# print the shape of the combined_site dataframe\ncombined_site.shape\n\n(1857, 8)\n\n\nIf done correctly, the combined_site dataframe should have a total of 1857 rows and 8 columns"
  },
  {
    "objectID": "Grammys_Analytics.html#task-6",
    "href": "Grammys_Analytics.html#task-6",
    "title": "Grammys Project",
    "section": "Task 6",
    "text": "Task 6\nA. Create a new list called frames that has the combined_site, rec_academy, and grammys dataframes as entries. e.g. If the 3 dataframes were df1, df2, and df3, then the code would look like:\nframes = [df1, df2, df3]\n\n# create the list of dataframes\nframes = [combined_site, rec_academy, grammys]\n\nB. For each frame in the frames list, create a new column pages_per_session. This new column is the average number of pageviews per session on a given day. The higher this number the more “stickiness” your website has with your visitors.\nHint: Divide the pageviews by sessions\nThis can be achieved by using the following template:\nfor frame in frames:\n    frame['new_col'] = frame['col_A'] / frame['col_B']\n\n# create the `pages_per_session` column for all 3 dataframes.\nfor frame in frames:\n    frame['pages_per_session'] = frame['pageviews'] / frame['sessions']\n\nC. Visualize this new metric using a line chart for each site. (You will have 3 separate graphs)\n\n# combined_site graph\npx.line(data_frame=combined_site,\n        x='date',\n        y='pages_per_session',\n        title='Average Pages per Session on the Grammy\\'s Combined Website Over Time')\n\n                                                \n\n\n\n# grammys graph\npx.line(data_frame=grammys,\n        x='date',\n        y='pages_per_session',\n        title='Average Pages per Session on the Grammy\\'s Website Over Time')\n\n                                                \n\n\n\n# rec_academy graph\npx.line(data_frame=rec_academy,\n        x='date',\n        y='pages_per_session',\n        title='Average Pages per Session on the Recording Academy\\'s Website Over Time')\n\n                                                \n\n\nD. Looking at the 3 charts above, what can you say about the pages_per_session when the websites were combined versus after they were split?\nNote: Any large spikes in the data that do not correspond with the Grammy Awards Ceremony can be attributed to abnormalities in the data collection process and ignored in your analysis.\nBefore the split, the number of pages per session was around 1-2 pages, but after the split, the pages per session on the grammy’s stayed around 2, and the recording academy has around 2-3 pages."
  },
  {
    "objectID": "Grammys_Analytics.html#task-7",
    "href": "Grammys_Analytics.html#task-7",
    "title": "Grammys Project",
    "section": "Task 7",
    "text": "Task 7\nBounce rate is another important metric for The Recording Academy. Bounce Rate is a measure of the percentage of visitors who come to the site and never interact with the website and leave. In this task, you will define a function that takes in a dataframe as input and outputs the bounce rate.\nA. Create a function called bounce_rate that:\n\nTakes in a dataframe as input\nadds up all of the values in the bounced_sessions column and stores in a variable called sum_bounced\nadds up all of the values in the sessions column and stores it in a variable called sum_sessions\nreturns 100 * sum_bounced / sum_sessions\n\nHint: You will need use the .sum() function both in the sum_bounced and sum_sessions calculations. Don’t forget to multiply by 100 so that the answer appears as a percentage instead of a decimal.\n\ndef bounce_rate(dataframe):\n    '''\n    Calculates the bounce rate for visitors on the website.\n    input: dataframe with bounced_sessions and sessions columns\n    output: numeric value from bounce rate\n    '''\n    # WRITE YOUR CODE BELOW\n    # Remember, the input for the function is called `dataframe`\n    # So all calculations should reference that variable.\n    sum_bounced = dataframe['bounced_sessions'].sum()\n    sum_sessions = dataframe['sessions'].sum()\n    return 100 * sum_bounced / sum_sessions\n\n\n\n\nB. Use the frames variable from Task 6 to loop over each website (represented by a dataframe) to calculate the bounce rate. Print the bounce rate for each site.\nA template for getting the function to work will look like code below. Remember that this is NOT the print statement, you will still need to add that part.\nHint: To get the bounce rate use bounce_rate(frame) \nfor frame in frames:\n    my_value = my_function(frame)\nTip: If you want to reduce the number of decimals shown in an f-string, you can add :0.2f just before the end of the curly brackets but after your variable. Example: print(f'my value is: {my_value:0.2f}')\n\n# Calculate the Bounce Rate for each site. Use the frames list you created in Task 6.\n# frame_names is used to make the output look nicer\nframe_names = ['The Combined Site', 'The Recording Academy Site', 'The Grammys Site']\nfor frame, name in zip(frames, frame_names):\n    b_rate = bounce_rate(frame)\n    print(f'The bounce rate of {name} is {b_rate:0.2f}%')\n\nThe bounce rate of The Combined Site is 41.58%\nThe bounce rate of The Recording Academy Site is 33.67%\nThe bounce rate of The Grammys Site is 40.16%\n\n\nIf done correctly, the combined_site and grammys site will each have bounce rates in the low 40s. The rec_academy will have a bounce rate in the low 30s\nC. Another useful metric is how long on average visitors are staying on the website.\nCalculate the mean of the avg_session_duration_secs for each of the sites. Print each one using an f-string.\n\n# Calculate the average of the avg_session_duration_secs. Use the frames list you created in Task 6.\nfor frame, name in zip(frames, frame_names):\n    avg_session_duration = frame['avg_session_duration_secs'].mean()\n    print(f'The average session duration on {name} is {avg_session_duration:.2f} sec.')\n\nThe average session duration on The Combined Site is 102.85 sec.\nThe average session duration on The Recording Academy Site is 128.50 sec.\nThe average session duration on The Grammys Site is 82.99 sec.\n\n\nD. What can you say about these two metrics as it relates to each of the websites?\nThe recording academy has the lowest bounce rate and the longest average session duration. The combined site had the highest bounce rate and the grammys site had the lowest session rate. Based on the values for the bounce rate and average session duration, it looks like splitting the combined site lead the stickier users (users that don’t bounce as much) that have longer session times to the recording academy site, and the less sticky users to the grammys site."
  },
  {
    "objectID": "Grammys_Analytics.html#task-8",
    "href": "Grammys_Analytics.html#task-8",
    "title": "Grammys Project",
    "section": "Task 8",
    "text": "Task 8\nThe grammys_age_demographics.csv and tra_age_demographics.csv each contain the following information:\n\nage_group - The age group range. e.g. 18-24 are all visitors between the ages of 18 to 24 who come to the site.\npct_visitors - The percentage of all of the websites visitors that come from that specific age group.\n\nA. Read in the grammys_age_demographics.csv and tra_age_demographics.csv files and store them into dataframes named age_grammys and age_tra, respectively.\n\n# read in the files\nage_grammys = pd.read_csv('datasets_grammys/grammys_age_demographics.csv')\nage_tra = pd.read_csv('datasets_grammys/tra_age_demographics.csv')\n\n\n# preview the age_grammys file. the age_tra will look very similar.\ndisplay(age_grammys)\n\n\n\n\n\n\n\n\nage_group\npct_visitors\n\n\n\n\n0\n18-24\n27.37\n\n\n1\n25-34\n24.13\n\n\n2\n35-44\n18.72\n\n\n3\n45-54\n13.57\n\n\n4\n55-64\n9.82\n\n\n5\n65+\n6.39\n\n\n\n\n\n\n\nB. For each dataframe, create a new column called website whose value is the name of the website. e.g. the age_grammys values for website should all be Grammys and for the age_tra they should be Recording Academy.\n\n# create the website column\nage_grammys['website'] = 'Grammys'\nage_tra['website'] = 'Recording Academy'\n\nC. use the pd.concat() method to join these two datasets together. Store the result into a new variable called age_df\nHint: Remember that you need to put your dataframe variables inside of a list first then pass that as your input of pd.concat()\n\n# use pd.concat to join the two datasets\nage_dif = pd.concat([age_grammys, age_tra], join='inner')\n\nIf done correctly your new dataframe will have 12 rows and 3 columns.\nD. Create a bar chart of the age_group and pct_visitors. This chart should have, for each age group, one color for the Recording Academy and a different color for the Grammys.\nHint: You will need to use the barmode='group' option in px.bar(). See the code snippet below to guide you.\n# template for visualization\npx.bar(dataframe, x='variable1', y='variable2', color='variable3', barmode='group')\n\n# Create bar chart\npx.bar(age_dif,\n       x='age_group',\n       y='pct_visitors',\n       color='website',\n       barmode='group',\n       title='Demograghic Breakdown of Visitors by Percentage to the Split Websites')\n\n                                                \n\n\nE. Looking at the chart above, what can you say about how the age demographics differ between the two websites?\nThe age demographics for both websites is almost identical, but the recording academy has a slightly higher percentage of users 25-34 years old and the grammys has a slightly higher percentage of users 55+ years old."
  },
  {
    "objectID": "Grammys_Analytics.html#task-9",
    "href": "Grammys_Analytics.html#task-9",
    "title": "Grammys Project",
    "section": "Task 9",
    "text": "Task 9\nUsing the work you did in this project, would you recommend that the websites stay separate? Please give a 2-3 paragraph answer using details from the analysis work above explaining why or why not they should stay separate.\nBased on the analysis I have done on the website data above, I would recomend the website stays separate. One of the metrics that improved since the split is the pages per view. When looking at the average pages per view, we can see that the combined site has less average pages per view then both both of the seperated websites. When lokking at this average over time, it stays relatively consistent, with no major permenent changes other than when they split.\nAnother important metric is the average number of visitors to each site, during or outside of the awards week. During the awards week, the average number of visitors to the combined site is higher that the average of visitors to either of the seperated sites. Outside of the awards week, the combined site has a simmilar average number of visitors as the the grammys website and the recording academy has a good number of visitors as well. With the averages of the grammys and recording academy combined, they have more average visitors that the combined site."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Connor’s Portfolio",
    "section": "",
    "text": "Projects\n\n\n\nA breakdown on the effectiveness of the recording academy’s desisionto split it’s website\n\n\nThis is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites."
  }
]